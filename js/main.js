/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/ColorRGB.js":
/*!****************************!*\
  !*** ./src/js/ColorRGB.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ColorRGB\": () => (/* binding */ ColorRGB)\n/* harmony export */ });\n/**\n * Library for working with RGB colors\n */\nclass ColorRGB {\n  constructor(r, g, b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  /**\n   * Return the RGB complimentary color for the given RGB color.\n   *\n   * @return {ColorRGB}\n   */\n  getComplimentaryColor() {\n    return new ColorRGB(\n      255 - this.r,\n      255 - this.g,\n      255 - this.b\n    );\n  }\n\n  /**\n   * Generate a grey based on the luminosity of the given color.\n   *\n   * @return {ColorRGB}\n   */\n  getGrey() {\n    const avg = Math.round((this.r + this.g + this.b) / 3);\n    return new ColorRGB(\n      avg,\n      avg,\n      avg\n    );\n  }\n\n  /**\n   * Mix a color into the current color.\n   *\n   * @param {ColorRGB} otherColor\n   * @param {number} ratio a number between 0 - 1, the amount of the other color to mix in.\n   */\n  mixColors(otherColor, ratio = 0.5) {\n    return new ColorRGB(\n      Math.round(this.r * (1 - ratio) + otherColor.r * ratio),\n      Math.round(this.g * (1 - ratio) + otherColor.g * ratio),\n      Math.round(this.b * (1 - ratio) + otherColor.b * ratio)\n    );\n  }\n\n  /**\n   * Get darker shades of the current color.\n   *\n   * @param {number} numShades the number of shades to generate\n   * @param {boolean} lightToDark whether or not the shades are ordered light to dark or from dark to light\n   * @return {Array.<ColorRGB>}\n   */\n  getShades(numShades, lightToDark = true) {\n    const shades = [];\n\n    for (let i = 0; i < numShades; i++) {\n      const numerator = lightToDark ? numShades - i : i + 1;\n      shades.push(new ColorRGB(\n        Math.round(this.r * (numerator / numShades)),\n        Math.round(this.g * (numerator / numShades)),\n        Math.round(this.b * (numerator / numShades))\n      ));\n    }\n    return shades;\n  }\n\n  /**\n   * Convert a hex color code to RGB.\n   *\n   * @param {string} hex color code\n   * @returns {ColorRGB}\n   */\n  static hexToRgb(hex) {\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return new ColorRGB(\n      parseInt(result[1], 16),\n      parseInt(result[2], 16),\n      parseInt(result[3], 16)\n    );\n  }\n\n  /**\n   * Ensures that the color is within a certain range of brightness.\n   *\n   * @param {number} min\n   * @param {number} max\n   * @returns {ColorRGB}\n   */\n  clampAvgBrightness(min, max) {\n    if (min < 0 || max < 0 || min >= max) {\n      throw 'Invalid min or max';\n    }\n    const avg = (this.r + this.g + this.b) / 3;\n    let adjustment = 1;\n    if (avg < min) {\n      adjustment = min / avg;\n    } else if (avg > max) {\n      adjustment = max / avg;\n    }\n    return new ColorRGB(\n      Math.round(this.r * adjustment),\n      Math.round(this.g * adjustment),\n      Math.round(this.b * adjustment)\n    );\n  }\n}\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/ColorRGB.js?");

/***/ }),

/***/ "./src/js/DroidApi.js":
/*!****************************!*\
  !*** ./src/js/DroidApi.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DroidApi\": () => (/* binding */ DroidApi)\n/* harmony export */ });\n/* harmony import */ var _JsonAjaxer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JsonAjaxer */ \"./src/js/JsonAjaxer.js\");\n/* harmony import */ var _StructureFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StructureFactory */ \"./src/js/StructureFactory.js\");\n\n\n\n/**\n * API Gateway for the Droid API\n */\nclass DroidApi {\n  constructor(scheme, domain, ajax, loadTestMultiply = 1) {\n    this.scheme = scheme;\n    this.domain = domain;\n    this.ajax = (ajax !== undefined) ? ajax: new _JsonAjaxer__WEBPACK_IMPORTED_MODULE_0__.JsonAjaxer();\n    this.loadTestMultiply = loadTestMultiply;\n  }\n  multiplyDataLoad(dataArray, multiplier) {\n    let product = [];\n    for (let j = 0; j < multiplier; j++) {\n      product = product.concat(dataArray);\n    }\n    return product;\n  }\n  getStructures() {\n    return this.ajax.get(`${this.scheme}${this.domain}/api/di/Structure`)\n      .then(data => {\n        const structureFactory = new _StructureFactory__WEBPACK_IMPORTED_MODULE_1__.StructureFactory();\n        const structures = [];\n        let rawStructures = data.Structure;\n\n        if (this.loadTestMultiply > 1) {\n          rawStructures = this.multiplyDataLoad(rawStructures, this.loadTestMultiply);\n        }\n\n        for (let i = 0; i < rawStructures.length; i ++) {\n          structures[i] = structureFactory.make(rawStructures[i]);\n          structures[i].id = i;\n        }\n\n        return structures;\n      })\n  }\n}\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/DroidApi.js?");

/***/ }),

/***/ "./src/js/DroidUI.js":
/*!***************************!*\
  !*** ./src/js/DroidUI.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DroidUI\": () => (/* binding */ DroidUI)\n/* harmony export */ });\n/* harmony import */ var _ColorRGB__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ColorRGB */ \"./src/js/ColorRGB.js\");\n/* harmony import */ var _DroidApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DroidApi */ \"./src/js/DroidApi.js\");\n/* harmony import */ var _DroidUIStructure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DroidUIStructure */ \"./src/js/DroidUIStructure.js\");\n/* harmony import */ var _PixelArtViewer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PixelArtViewer */ \"./src/js/PixelArtViewer.js\");\n/* harmony import */ var _StructureArtGenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./StructureArtGenerator */ \"./src/js/StructureArtGenerator.js\");\n/* harmony import */ var _StructureMobilePalette__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./StructureMobilePalette */ \"./src/js/StructureMobilePalette.js\");\n/* harmony import */ var _StructureStaticPalette__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./StructureStaticPalette */ \"./src/js/StructureStaticPalette.js\");\n\n\n\n\n\n\n\n\n/**\n * Web App\n */\nclass DroidUI {\n\n  /**\n   * @param {DroidApi} droidApi\n   * @param {StructureArtGenerator} structureArtGenerator\n   * @param {StructureMobilePalette} structureMobilePalette\n   * @param {StructureStaticPalette} structureStaticPalette\n   */\n  constructor(\n    droidApi = new _DroidApi__WEBPACK_IMPORTED_MODULE_1__.DroidApi('http://', 'droid.sh'),\n    structureArtGenerator = new _StructureArtGenerator__WEBPACK_IMPORTED_MODULE_4__.StructureArtGenerator(),\n    structureMobilePalette = new _StructureMobilePalette__WEBPACK_IMPORTED_MODULE_5__.StructureMobilePalette(),\n    structureStaticPalette = new _StructureStaticPalette__WEBPACK_IMPORTED_MODULE_6__.StructureStaticPalette()\n  ) {\n    this.droidApi = droidApi;\n    this.structureArtGenerator = structureArtGenerator;\n    this.structureMobilePalette = structureMobilePalette;\n    this.structureStaticPalette = structureStaticPalette;\n    this.structures = [];\n  }\n\n  /**\n   * @param {Structure} structure\n   */\n  getPalette(structure) {\n    let palette;\n    const primaryColor = _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB.hexToRgb(structure.getPrimaryColor());\n    if (structure.isMobile() === true) {\n      palette = this.structureMobilePalette.generatePaletteSwap(primaryColor, structure);\n    } else {\n      palette = this.structureStaticPalette.generatePaletteSwap(primaryColor, structure);\n    }\n    return palette;\n  }\n\n  /**\n   * Load all structures and display them in the target element.\n   *\n   * @param {string} targetElementId\n   */\n  loadStructures(targetElementId) {\n    const targetElement = document.getElementById(targetElementId);\n\n    let structuresHtml = '';\n\n    this.droidApi.getStructures().then(structures => {\n      for (let i = 0; i < structures.length; i++) {\n        const droidUIStructure = new _DroidUIStructure__WEBPACK_IMPORTED_MODULE_2__.DroidUIStructure(structures[i]);\n\n        // Batch drawing by collecting all the HTML first\n        structuresHtml += droidUIStructure.render();\n\n        this.structures[i] = {\n          'structure': structures[i],\n          'droidUIStructure': droidUIStructure,\n          'layers': this.structureArtGenerator.generate(structures[i]),\n        }\n      }\n\n      // Update DOM\n      targetElement.innerHTML = structuresHtml;\n\n      for (let i = 0; i < this.structures.length; i++) {\n        /** @type {HTMLCanvasElement} */\n        const canvas = document.getElementById(this.structures[i].droidUIStructure.getCanvasId());\n        new _PixelArtViewer__WEBPACK_IMPORTED_MODULE_3__.PixelArtViewer(canvas, this.structures[i].layers, this.getPalette(this.structures[i].structure));\n        console.log(this.structures[i].structure);\n      }\n    });\n  }\n}\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/DroidUI.js?");

/***/ }),

/***/ "./src/js/DroidUIStructure.js":
/*!************************************!*\
  !*** ./src/js/DroidUIStructure.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DroidUIStructure\": () => (/* binding */ DroidUIStructure)\n/* harmony export */ });\n/**\n * Web UI component for structures.\n */\nclass DroidUIStructure {\n  constructor(structure, idPrefix = '') {\n    this.structure = structure;\n    this.idPrefix = idPrefix;\n  }\n  getCanvasId() {\n    return `${this.idPrefix}structure-${this.structure.getId()}`;\n  }\n  render() {\n    return `\n          <div class=\"nes-container structure-card\">\n            <div class=\"game-asset-wrapper\">\n              <canvas id=\"${this.getCanvasId()}\" class=\"pixel-art-viewer\" width=\"64\" height=\"64\">\n                Your browser does not support the canvas element.\n              </canvas>\n            </div>\n            <div class=\"nes-container with-title\">\n              <h3 class=\"title\">Attributes</h3>\n              <div class=\"details\">\n                <h4>${this.structure.getName()}</h4>\n                <p>${this.structure.getDescription()}</p>\n                <br>\n                <div><span class=\"attribute-label\">Structure ID:</span> ${this.structure.getId()}</div>\n                <div><span class=\"attribute-label\">Health:</span> ${this.structure.getHealthCurrent()} / ${this.structure.getHealthMax()}</div>\n                <div><span class=\"attribute-label\">Battery Charge:</span> ${this.structure.getBatteryAmount()} ${this.structure.getBatteryDenom()}</div>\n                <div><span class=\"attribute-label\">Ambits:</span> ${this.structure.getAmbits()}</div>\n                <br>\n                <div><span class=\"attribute-label\">Speed:</span> ${this.structure.getSpeed()}</div>\n                <div><span class=\"attribute-label\">Accuracy:</span> ${this.structure.getAccuracy()}</div>\n                <div><span class=\"attribute-label\">Mass:</span> ${this.structure.getMass()}</div>\n                <div><span class=\"attribute-label\">Strength:</span> ${this.structure.getStrength()}</div>\n                <div><span class=\"attribute-label\">Energy Efficiency:</span> ${this.structure.getEnergyEfficiency()}</div>\n              </div>\n            </div>\n            ${(this.structure.hasFeatureAttack()) ? `\n              <div class=\"nes-container with-title\">\n                <h3 class=\"title\">Attack Systems</h3>\n                <div class=\"details\">\n                  <div><span class=\"attribute-label\">Melee Attack:</span> ${this.structure.getMeleeAttack()}</div>\n                  <div><span class=\"attribute-label\">Range Attack:</span> ${this.structure.getRangeAttack()}</div>\n                </div>\n              </div>\n            ` : ''}\n            ${(this.structure.hasFeatureDefensive()) ? `\n              <div class=\"nes-container with-title\">\n                <h3 class=\"title\">Defensive Systems</h3>\n                <div class=\"details\">\n                  <div><span class=\"attribute-label\">Melee Defense:</span> ${this.structure.getMeleeDefense()}</div>\n                  <div><span class=\"attribute-label\">Range Defense:</span> ${this.structure.getRangeDefense()}</div>\n                </div>\n              </div>\n            ` : ''}\n            ${(this.structure.hasFeatureEngineering()) ? `\n              <div class=\"nes-container with-title\">\n                <h3 class=\"title\">Engineering Systems</h3>\n                <div class=\"details\">\n                  <div><span class=\"attribute-label\">Build Rate:</span> ${this.structure.getBuildRate()}</div>\n                  <div><span class=\"attribute-label\">Restoration Rate:</span> ${this.structure.getRestorationRate()}</div>\n                </div>\n              </div>\n            ` : ''}\n            ${(this.structure.hasFeaturePower()) ?\n      `<div class=\"nes-container with-title\">\n                <h3 class=\"title\">Power Systems</h3>\n                <div class=\"details\">\n                  <div><span class=\"attribute-label\">Generation Rate:</span> ${this.structure.getGenerationRate()}</div>\n                  <div><span class=\"attribute-label\">Charge Rate:</span> ${this.structure.getChargeRate()}</div>\n                  <div><span class=\"attribute-label\">Drain Rate:</span> ${this.structure.getDrainRate()}</div>\n                </div>\n              </div>`\n      : ''}\n          </div>\n        `;\n  }\n}\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/DroidUIStructure.js?");

/***/ }),

/***/ "./src/js/JsonAjaxer.js":
/*!******************************!*\
  !*** ./src/js/JsonAjaxer.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"JsonAjaxer\": () => (/* binding */ JsonAjaxer)\n/* harmony export */ });\n/**\n * Encapsulate and abstract HTTP request methods.\n */\nclass JsonAjaxer {\n  async get (url) {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      redirect: 'follow'\n    });\n    return response.json();\n  }\n}\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/JsonAjaxer.js?");

/***/ }),

/***/ "./src/js/PixelArtViewer.js":
/*!**********************************!*\
  !*** ./src/js/PixelArtViewer.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PixelArtViewer\": () => (/* binding */ PixelArtViewer)\n/* harmony export */ });\n/**\n * Graphics engine for rendering pixel art on the web.\n */\nclass PixelArtViewer {\n\n  /**\n   * @param {HTMLCanvasElement} canvas the target canvas that will become the viewer\n   * @param {Array.<string>} imageLayerPaths the paths to the images to render. Image layers are rendered in order.\n   * @param {Array.<Array>} palette list of colors to swap\n   */\n  constructor(canvas, imageLayerPaths, palette = []) {\n    this.canvas = canvas;\n    this.aspectRatio = canvas.height / canvas.width;\n    this.context = canvas.getContext(\"2d\");\n    this.imageLayerPaths = imageLayerPaths;\n    this.numImagesLoaded = 0;\n    this.layers = [];\n    this.palette = palette;\n\n    this.lockAspectRatio();\n    this.loadAndRenderImageLayers();\n  }\n\n  /**\n   * Locks the aspect ratio so that the aspect ratio is maintained even if the image is responsively resized.\n   */\n  lockAspectRatio() {\n    this.canvas.height = this.canvas.width * this.aspectRatio;\n  }\n\n  /**\n   * Check that all images have been loaded. Used before rendering to reduce re-renders.\n   * @returns {boolean}\n   */\n  areAllImagesLoaded() {\n    return this.numImagesLoaded === this.imageLayerPaths.length;\n  }\n\n  /**\n   * Loads and renders the image layers in the order defined by the image paths.\n   */\n  loadAndRenderImageLayers() {\n    for(let i = 0; i < this.imageLayerPaths.length; i++) {\n      const img = new Image();\n      const viewer = this;\n      img.onload = () => {\n        viewer.numImagesLoaded++;\n        if (viewer.areAllImagesLoaded()) {\n          viewer.render();\n        }\n      }\n      img.src = this.imageLayerPaths[i];\n      this.layers[i] = img;\n    }\n  }\n\n  /**\n   * Draw all image layers to the canvas in order.\n   */\n  render() {\n    this.clearCanvas();\n    for(let i = 0; i < this.layers.length; i++) {\n      this.context.drawImage(this.layers[i], 0, 0);\n    }\n    this.swapColors(this.palette);\n  }\n\n  /**\n   * Given an array of color pairs, swap the first color with the second color in the canvas.\n   *\n   * @param {Array.<Array>} colorSwapList\n   */\n  swapColors(colorSwapList) {\n    const imageData = this.context.getImageData(0, 0, this.canvas.width, this.canvas.height);\n    const data = imageData.data;\n    for (let i = 0; i < data.length; i += 4) {\n      for (let j = 0; j < colorSwapList.length; j++) {\n        const targetColor = colorSwapList[j][0];\n        const newColor = colorSwapList[j][1];\n        const red = data[i];\n        const green = data[i + 1];\n        const blue = data[i + 2];\n        if (red === targetColor.r && green === targetColor.g && blue === targetColor.b) {\n          data[i]     = newColor.r; // red\n          data[i + 1] = newColor.g; // green\n          data[i + 2] = newColor.b; // blue\n        }\n      }\n    }\n    this.context.putImageData(imageData, 0, 0);\n  }\n\n  clearCanvas() {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n}\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/PixelArtViewer.js?");

/***/ }),

/***/ "./src/js/Ranks.js":
/*!*************************!*\
  !*** ./src/js/Ranks.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Ranks\": () => (/* binding */ Ranks)\n/* harmony export */ });\nclass Ranks {\n  constructor(\n    rankS,\n    rankA,\n    rankB,\n    rankC,\n    rankD,\n    rankF,\n  ) {\n    this.rankS = rankS;\n    this.rankA = rankA;\n    this.rankB = rankB;\n    this.rankC = rankC;\n    this.rankD = rankD;\n    this.rankF = rankF;\n  }\n\n  static make(max) {\n    return new Ranks(\n      max - (max * 0.02),\n      max - (max * 0.16),\n      max - (max * 0.50),\n      max - (max * 0.84),\n      max - (max * 0.98),\n      0\n    );\n  }\n}\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/Ranks.js?");

/***/ }),

/***/ "./src/js/Structure.js":
/*!*****************************!*\
  !*** ./src/js/Structure.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Structure\": () => (/* binding */ Structure)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/js/constants.js\");\n\n\n/**\n * Structure Model\n */\nclass Structure {\n  constructor() {\n    this.accuracy = 0;\n    this.ambits = [];\n    this.battery = {\n      amount: 0,\n      denom: ''\n    };\n    this.build_rate = 0;\n    this.capacity_current = 0;\n    this.capacity_max = 0;\n    this.charge_rate = 0;\n    this.charging_slot = [];\n    this.charging_slot_count = 0;\n    this.creator = '';\n    this.description = '';\n    this.drain_rate = 0;\n    this.energy_efficiency = 0;\n    this.energy_to_build = {\n      amount: 0,\n      denom: ''\n    }\n    this.generate_rate = 0;\n    this.features = [];\n    this.hash ='';\n    this.health_current = 0;\n    this.health_max = 0;\n    this.id = '';\n    this.input = '';\n    this.is_mobile = false;\n    this.mass = 0;\n    this.melee_attack = 0;\n    this.melee_defense = 0;\n    this.name = '';\n    this.owner = '';\n    this.parent_id = '';\n    this.primary_color = '';\n    this.range_attack = 0;\n    this.range_defense = 0;\n    this.restoration_rate = 0;\n    this.schematic = '';\n    this.speed = 0;\n    this.storage = [];\n    this.strength = 0;\n    this.supervisor = '';\n  }\n\n  /* Base Attributes */\n  getId() {\n    return this.id;\n  }\n  getName() {\n    return this.name;\n  }\n  getDescription() {\n    return this.description;\n  }\n  getHealthCurrent() {\n    return this.health_current;\n  }\n  getHealthMax() {\n    return this.health_max;\n  }\n  getBatteryAmount() {\n    return this.battery.amount;\n  }\n  getBatteryDenom() {\n    return this.battery.denom;\n  }\n  getAmbits() {\n    return this.ambits.join(', ');\n  }\n  getSpeed() {\n    return this.speed;\n  }\n  getAccuracy() {\n    return this.accuracy;\n  }\n  getMass() {\n    return this.mass;\n  }\n  getStrength() {\n    return this.strength;\n  }\n  getEnergyEfficiency() {\n    return this.energy_efficiency;\n  }\n  getPrimaryColor() {\n    return this.primary_color;\n  }\n\n  isMobile() {\n    return this.is_mobile;\n  }\n\n  hasAmbit(ambit) {\n    return this.ambits.includes(ambit);\n  }\n  hasAmbitLand() {\n    return this.hasAmbit(_constants__WEBPACK_IMPORTED_MODULE_0__.AMBITS.LAND);\n  }\n  hasAmbitSky() {\n    return this.hasAmbit(_constants__WEBPACK_IMPORTED_MODULE_0__.AMBITS.SKY);\n  }\n  hasAmbitSpace() {\n    return this.hasAmbit(_constants__WEBPACK_IMPORTED_MODULE_0__.AMBITS.SPACE);\n  }\n  hasAmbitWater() {\n    return this.hasAmbit(_constants__WEBPACK_IMPORTED_MODULE_0__.AMBITS.WATER);\n  }\n\n  hasFeature(feature) {\n    return this.features.includes(feature);\n  }\n  hasFeatureAttack() {\n    return this.hasFeature(_constants__WEBPACK_IMPORTED_MODULE_0__.FEATURES.ATTACK);\n  }\n  hasFeatureDefensive() {\n    return this.hasFeature(_constants__WEBPACK_IMPORTED_MODULE_0__.FEATURES.DEFENSIVE);\n  }\n  hasFeatureEngineering() {\n    return this.hasFeature(_constants__WEBPACK_IMPORTED_MODULE_0__.FEATURES.ENGINEERING);\n  }\n  hasFeaturePower() {\n    return this.hasFeature(_constants__WEBPACK_IMPORTED_MODULE_0__.FEATURES.POWER);\n  }\n  hasFeatureStorage() {\n    return this.hasFeature(_constants__WEBPACK_IMPORTED_MODULE_0__.FEATURES.STORAGE);\n  }\n\n  /* Attack */\n  getMeleeAttack() {\n    return this.melee_attack;\n  }\n  getRangeAttack() {\n    return this.range_attack;\n  }\n\n  /* Defensive */\n  getMeleeDefense() {\n    return this.melee_defense;\n  }\n  getRangeDefense() {\n    return this.range_defense;\n  }\n\n  /* Engineering */\n  getBuildRate() {\n    return this.build_rate;\n  }\n  getRestorationRate() {\n    return this.restoration_rate;\n  }\n\n  /* Power */\n  getChargingSlotCount () {\n    return parseInt(this.charging_slot_count);\n  }\n  getGenerationRate() {\n    return this.generate_rate;\n  }\n  getChargeRate() {\n    return this.charge_rate;\n  }\n  getDrainRate() {\n    return this.drain_rate;\n  }\n}\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/Structure.js?");

/***/ }),

/***/ "./src/js/StructureArtGenerator.js":
/*!*****************************************!*\
  !*** ./src/js/StructureArtGenerator.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StructureArtGenerator\": () => (/* binding */ StructureArtGenerator)\n/* harmony export */ });\n/**\n * Assembles the art for a structure using images and layers.\n */\nclass StructureArtGenerator {\n  constructor() {\n    this.imgDir = 'img/structures/';\n    this.backgroundsDir = 'backgrounds/';\n    this.mobileDir = 'mobile/';\n    this.staticDir = 'static/';\n  }\n\n  /* Backgrounds */\n  backgroundDefault(layers) {\n    layers.push(`${this.imgDir}${this.backgroundsDir}structure-bg-default.png`)\n  }\n  backgroundLand(layers, structure) {\n    if (structure.hasAmbitLand()) {\n      layers.push(`${this.imgDir}${this.backgroundsDir}structure-bg-land.png`);\n    }\n  }\n  backgroundSky(layers, structure) {\n    if (structure.hasAmbitSky()) {\n      layers.push(`${this.imgDir}${this.backgroundsDir}structure-bg-sky.png`);\n    }\n  }\n  backgroundSpace(layers, structure) {\n    if (structure.hasAmbitSpace()) {\n      layers.push(`${this.imgDir}${this.backgroundsDir}structure-bg-space.png`);\n    }\n  }\n  backgroundWater(layers, structure) {\n    if (structure.hasAmbitWater()) {\n      layers.push(`${this.imgDir}${this.backgroundsDir}structure-bg-water.png`);\n    }\n  }\n  backgroundLayerFilter(layers) {\n    layers.push(`${this.imgDir}${this.backgroundsDir}structure-bg-lighten-15.png`);\n  }\n\n  /* Mobile Structure Base */\n  mobileStructureChassis(layers) {\n    layers.push(`${this.imgDir}${this.mobileDir}structure-mobile-chassis.png`);\n  }\n\n  /* Mobile Structure Ambit Parts */\n  mobileStructureLand(layers, structure) {\n    if (structure.hasAmbitLand()) {\n      layers.push(`${this.imgDir}${this.mobileDir}structure-mobile-land.png`);\n    }\n  }\n  mobileStructureSky(layers, structure) {\n    if (structure.hasAmbitSky()) {\n      layers.push(`${this.imgDir}${this.mobileDir}structure-mobile-sky.png`);\n    }\n  }\n  mobileStructureSpace(layers, structure) {\n    if (structure.hasAmbitSpace()) {\n      layers.push(`${this.imgDir}${this.mobileDir}structure-mobile-space.png`);\n    }\n  }\n  mobileStructureWater(layers, structure) {\n    if (structure.hasAmbitWater()) {\n      layers.push(`${this.imgDir}${this.mobileDir}structure-mobile-water.png`);\n    }\n  }\n\n  /* Mobile Structure Feature Parts */\n  mobileStructureAttack(layers, structure) {\n    if (structure.hasFeatureAttack()) {\n      layers.push(`${this.imgDir}${this.mobileDir}structure-mobile-attack.png`);\n    }\n  }\n  mobileStructureDefensive(layers, structure) {\n    if (structure.hasFeatureDefensive()) {\n      layers.push(`${this.imgDir}${this.mobileDir}structure-mobile-defense.png`);\n    }\n  }\n  mobileStructureEngineering(layers, structure) {\n    if (structure.hasFeatureEngineering()) {\n      layers.push(`${this.imgDir}${this.mobileDir}structure-mobile-engineering.png`);\n    }\n  }\n  mobileStructurePower(layers, structure) {\n    if (structure.hasFeaturePower()) {\n      layers.push(`${this.imgDir}${this.mobileDir}structure-mobile-power.png`);\n    }\n  }\n\n  mobileStructure(layers, structure) {\n    this.mobileStructureChassis(layers);\n\n    this.mobileStructureLand(layers, structure);\n    this.mobileStructureSky(layers, structure);\n    this.mobileStructureSpace(layers, structure);\n    this.mobileStructureWater(layers, structure);\n\n    this.mobileStructureAttack(layers, structure);\n    this.mobileStructureDefensive(layers, structure);\n    this.mobileStructureEngineering(layers, structure);\n    this.mobileStructurePower(layers, structure);\n  }\n\n  /* Static Structure Base */\n  staticStructureBuildings(layers) {\n    layers.push(`${this.imgDir}${this.staticDir}structure-static-buildings.png`);\n  }\n\n  /* Static Structure Ambit Parts */\n  staticStructureSky(layers, structure) {\n    if (structure.hasAmbitSky()) {\n      layers.push(`${this.imgDir}${this.staticDir}structure-static-buildings-base.png`);\n      layers.push(`${this.imgDir}${this.staticDir}structure-static-sky.png`);\n    }\n  }\n  staticStructureSpace(layers, structure) {\n    if (structure.hasAmbitSpace()) {\n      layers.push(`${this.imgDir}${this.staticDir}structure-static-buildings-base.png`);\n      layers.push(`${this.imgDir}${this.staticDir}structure-static-space.png`);\n    }\n  }\n  staticStructureWater(layers, structure) {\n    if (structure.hasAmbitWater()) {\n      layers.push(`${this.imgDir}${this.staticDir}structure-static-buildings-base.png`);\n      layers.push(`${this.imgDir}${this.staticDir}structure-static-water.png`);\n    }\n  }\n\n  /* Static Structure Feature Parts */\n  staticStructureAttack(layers, structure) {\n    if (structure.hasFeatureAttack()) {\n      layers.push(`${this.imgDir}${this.staticDir}structure-static-attack.png`);\n    }\n  }\n  staticStructureDefensive(layers, structure) {\n    if (structure.hasFeatureDefensive()) {\n      layers.push(`${this.imgDir}${this.staticDir}structure-static-defense.png`);\n    }\n  }\n  staticStructureEngineering(layers, structure) {\n    if (structure.hasFeatureEngineering()) {\n      layers.push(`${this.imgDir}${this.staticDir}structure-static-engineering.png`);\n    }\n  }\n  staticStructurePower(layers, structure) {\n    if (structure.hasFeaturePower()) {\n      layers.push(`${this.imgDir}${this.staticDir}structure-static-power.png`);\n    }\n  }\n\n  staticStructure(layers, structure) {\n    this.staticStructureBuildings(layers);\n\n    this.staticStructureSky(layers, structure);\n    this.staticStructureSpace(layers, structure);\n    this.staticStructureWater(layers, structure);\n\n    this.staticStructureAttack(layers, structure);\n    this.staticStructureDefensive(layers, structure);\n    this.staticStructureEngineering(layers, structure);\n    this.staticStructurePower(layers, structure);\n  }\n\n  /**\n   * Generate the art for a given structure.\n   * @param {Structure} structure\n   */\n  generate(structure) {\n    let layers = [];\n    this.backgroundDefault(layers);\n    this.backgroundSpace(layers, structure);\n    this.backgroundSky(layers, structure);\n    this.backgroundLand(layers, structure);\n    this.backgroundWater(layers, structure);\n    this.backgroundLayerFilter(layers);\n    if (structure.isMobile()) {\n      this.mobileStructure(layers, structure);\n    } else {\n      this.staticStructure(layers, structure);\n    }\n    return layers;\n  }\n}\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/StructureArtGenerator.js?");

/***/ }),

/***/ "./src/js/StructureFactory.js":
/*!************************************!*\
  !*** ./src/js/StructureFactory.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StructureFactory\": () => (/* binding */ StructureFactory)\n/* harmony export */ });\n/* harmony import */ var _Structure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Structure */ \"./src/js/Structure.js\");\n\n\nclass StructureFactory {\n  make(obj) {\n    const structure = new _Structure__WEBPACK_IMPORTED_MODULE_0__.Structure();\n    Object.assign(structure, obj);\n    return structure;\n  }\n}\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/StructureFactory.js?");

/***/ }),

/***/ "./src/js/StructureMobilePalette.js":
/*!******************************************!*\
  !*** ./src/js/StructureMobilePalette.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StructureMobilePalette\": () => (/* binding */ StructureMobilePalette)\n/* harmony export */ });\n/* harmony import */ var _ColorRGB__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ColorRGB */ \"./src/js/ColorRGB.js\");\n/* harmony import */ var _StructureRanks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StructureRanks */ \"./src/js/StructureRanks.js\");\n\n\n\n/**\n * Generates palettes for mobile structures.\n */\nclass StructureMobilePalette {\n  constructor() {\n    this.chassisTop = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 152, 0);\n    this.chassisBottom = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 87, 34);\n    this.waterFin = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 186, 0);\n    this.landTire = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(88, 88, 88);\n    this.landHubCap = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(192, 192, 192);\n    this.skyWing = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(244, 67, 54);\n    this.spaceFlameCore = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(254, 254, 254);\n    this.spaceInnerFlame = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 213, 79);\n    this.spaceOuterFlame = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 61, 0);\n    this.attackGunBarrel = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(158, 158, 158);\n    this.attackGunAccent = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 179, 0);\n    this.powerLightColor = [\n      new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(118, 251, 3),\n      new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(118, 252, 3),\n      new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(118, 253, 3),\n      new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(118, 254, 3),\n      new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(118, 255, 3)\n    ];\n    this.engineeringCraneArm = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(132, 175, 196);\n    this.engineeringCraneClaw = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(220, 232, 238);\n    this.defenseInnerShield = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(128, 216, 255);\n    this.defenseOuterShield = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(224, 247, 250);\n  }\n\n  /**\n   * @param {Array.<Array>} paletteSwap\n   * @param {ColorRGB} primaryColor\n   */\n  generateChassisPaletteSwap(paletteSwap, primaryColor) {\n    const adjustedColor = primaryColor.clampAvgBrightness(40, 255);\n    const shades = adjustedColor.getShades(2);\n    paletteSwap.push([this.chassisTop, shades[0]]);\n    paletteSwap.push([this.chassisBottom, shades[1]]);\n  }\n\n  /**\n   * @param {Array.<Array>} paletteSwap\n   * @param {ColorRGB} primaryColor\n   */\n  generateSkyPaletteSwap(paletteSwap, primaryColor) {\n    const adjustedColor = primaryColor.clampAvgBrightness(250, 255);\n    const shades = adjustedColor.getShades(2);\n    paletteSwap.push([this.skyWing, shades[1]]);\n  }\n\n  /**\n   * @param {Array.<Array>} paletteSwap\n   * @param {ColorRGB} primaryColor\n   */\n  generateWaterPaletteSwap(paletteSwap, primaryColor) {\n    const adjustedColor = primaryColor.clampAvgBrightness(250, 255);\n    const shades = adjustedColor.getShades(2);\n    paletteSwap.push([this.waterFin, shades[1]]);\n  }\n\n  /**\n   * @param {Array.<Array>} paletteSwap\n   * @param {ColorRGB} primaryColor\n   * @param {Structure} structure\n   */\n  generateAttackPaletteSwap(paletteSwap, primaryColor, structure) {\n    const ranks = (new _StructureRanks__WEBPACK_IMPORTED_MODULE_1__.StructureRanks()).getAttackRanks();\n\n    let gunAccentColor = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 0, 0);\n    let gunBarrelColor = this.attackGunBarrel;\n    if (structure.getRangeAttack() > ranks.rankS) {\n      gunAccentColor = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 255, 255);\n      gunBarrelColor = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 255, 255);\n    } else if (structure.getRangeAttack() > ranks.rankA) {\n      gunAccentColor = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(0, 186, 255);\n    } else if (structure.getRangeAttack() > ranks.rankB) {\n      gunAccentColor = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(0, 255, 174);\n    } else if (structure.getRangeAttack() > ranks.rankC) {\n      gunAccentColor = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 252, 0);\n    } else if (structure.getRangeAttack() > ranks.rankD) {\n      gunAccentColor = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 179, 0);\n    }\n\n    paletteSwap.push([this.attackGunBarrel, gunBarrelColor]);\n    paletteSwap.push([this.attackGunAccent, gunAccentColor]);\n  }\n\n  /**\n   * @param {Array.<Array>} paletteSwap\n   * @param {ColorRGB} primaryColor\n   * @param {Structure} structure\n   */\n  generateDefensivePaletteSwap(paletteSwap, primaryColor, structure) {\n    const complimentaryColor = primaryColor.getComplimentaryColor();\n    const adjustedColor = complimentaryColor.clampAvgBrightness(240, 255);\n    const shieldShades = adjustedColor.getShades(10);\n    const ranks = (new _StructureRanks__WEBPACK_IMPORTED_MODULE_1__.StructureRanks()).getDefensiveRanks();\n\n    let outerShieldColor = shieldShades[4];\n    let innerShieldColor = shieldShades[6];\n    if (structure.getRangeDefense() > ranks.rankS) {\n      outerShieldColor = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 255, 255);\n      innerShieldColor = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(40, 40, 40);\n    } else if (structure.getRangeDefense() > ranks.rankA) {\n      outerShieldColor = shieldShades[0];\n      innerShieldColor = shieldShades[2];\n    } else if (structure.getRangeDefense() > ranks.rankB) {\n      outerShieldColor = shieldShades[1];\n      innerShieldColor = shieldShades[3];\n    } else if (structure.getRangeDefense() > ranks.rankC) {\n      outerShieldColor = shieldShades[2];\n      innerShieldColor = shieldShades[4];\n    } else if (structure.getRangeDefense() > ranks.rankD) {\n      outerShieldColor = shieldShades[3];\n      innerShieldColor = shieldShades[5];\n    }\n\n    paletteSwap.push([this.defenseOuterShield, outerShieldColor]);\n    paletteSwap.push([this.defenseInnerShield, innerShieldColor]);\n  }\n\n  /**\n   * @param {Array.<Array>}paletteSwap\n   * @param {ColorRGB} primaryColor\n   * @param {Structure} structure\n   */\n  generateEngineeringPaletteSwap(paletteSwap, primaryColor, structure) {\n    const ranks = (new _StructureRanks__WEBPACK_IMPORTED_MODULE_1__.StructureRanks()).getEngineeringRanks();\n\n    let color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(194, 15, 15);\n    if (structure.getBuildRate() > ranks.rankS) {\n      color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(20, 20, 20);\n    } else if (structure.getBuildRate() > ranks.rankA) {\n      color = this.engineeringCraneArm;\n    } else if (structure.getBuildRate() > ranks.rankB) {\n      color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(82, 148, 68);\n    } else if (structure.getBuildRate() > ranks.rankC) {\n      color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(240, 198, 5);\n    } else if (structure.getBuildRate() > ranks.rankD) {\n      color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(230, 124, 0);\n    }\n\n    paletteSwap.push([this.engineeringCraneArm, color]);\n  }\n\n  /**\n   * @param {Array.<Array>}paletteSwap\n   * @param {ColorRGB} primaryColor\n   * @param {Structure} structure\n   */\n  generatePowerPaletteSwap(paletteSwap, primaryColor, structure) {\n    const maxSlots = 5;\n    const slots = Math.min(structure.getChargingSlotCount(), maxSlots);\n    const offSlots = maxSlots - slots;\n    for (let i = 0; i < offSlots; i++) {\n      paletteSwap.push([this.powerLightColor[i], new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(20, 44, 0)]);\n    }\n  }\n\n  /**\n   * @param {ColorRGB} primaryColor\n   * @param {Structure} structure\n   */\n  generatePaletteSwap(primaryColor, structure) {\n    const paletteSwap = [];\n    this.generateChassisPaletteSwap(paletteSwap, primaryColor);\n    this.generateSkyPaletteSwap(paletteSwap, primaryColor);\n    this.generateWaterPaletteSwap(paletteSwap, primaryColor);\n    this.generateAttackPaletteSwap(paletteSwap, primaryColor, structure);\n    this.generateDefensivePaletteSwap(paletteSwap, primaryColor, structure);\n    this.generateEngineeringPaletteSwap(paletteSwap, primaryColor, structure);\n    this.generatePowerPaletteSwap(paletteSwap, primaryColor, structure);\n    return paletteSwap;\n  }\n}\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/StructureMobilePalette.js?");

/***/ }),

/***/ "./src/js/StructureRanks.js":
/*!**********************************!*\
  !*** ./src/js/StructureRanks.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StructureRanks\": () => (/* binding */ StructureRanks)\n/* harmony export */ });\n/* harmony import */ var _Ranks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ranks */ \"./src/js/Ranks.js\");\n\n\nclass StructureRanks {\n  constructor() {\n    this.accuracyMax = 255;\n    this.energyEfficiencyMax = 255;\n    this.massMax = 255;\n    this.speedMax = 255;\n    this.strengthMax = 255;\n  }\n\n  // Based on range attack max\n  getAttackRanks() {\n    return _Ranks__WEBPACK_IMPORTED_MODULE_0__.Ranks.make(this.speedMax + this.accuracyMax);\n  }\n\n  // Based on range defense max\n  getDefensiveRanks() {\n    return _Ranks__WEBPACK_IMPORTED_MODULE_0__.Ranks.make(this.massMax + this.accuracyMax);\n  }\n\n  // Based on build rate max\n  getEngineeringRanks() {\n    return _Ranks__WEBPACK_IMPORTED_MODULE_0__.Ranks.make(this.massMax + this.strengthMax);\n  }\n\n  // Based on generate rate max\n  getPowerRanks() {\n    return _Ranks__WEBPACK_IMPORTED_MODULE_0__.Ranks.make(this.energyEfficiencyMax + this.massMax);\n  }\n}\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/StructureRanks.js?");

/***/ }),

/***/ "./src/js/StructureStaticPalette.js":
/*!******************************************!*\
  !*** ./src/js/StructureStaticPalette.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StructureStaticPalette\": () => (/* binding */ StructureStaticPalette)\n/* harmony export */ });\n/* harmony import */ var _ColorRGB__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ColorRGB */ \"./src/js/ColorRGB.js\");\n/* harmony import */ var _StructureRanks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StructureRanks */ \"./src/js/StructureRanks.js\");\n\n\n\n/**\n * Generates palettes for static structures.\n */\nclass StructureStaticPalette {\n  constructor() {\n    this.buildingsLeft = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(224, 224, 224);\n    this.buildingsCenterLeft = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(158, 158, 158);\n    this.buildingsCenter = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(238, 238, 238);\n    this.buildingsCenterStripe = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(85, 85, 85);\n    this.buildingsCenterRight = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(224, 224, 224);\n    this.buildingsRight = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(189, 189, 189);\n    this.buildingsBaseTop = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(176, 190, 197);\n    this.buildingsBaseBottom = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(96, 125, 139);\n    this.skyInnerFlame = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 235, 59);\n    this.skyOuterFlame = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(213, 0, 0);\n    this.defenseInnerShield = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(128, 216, 255);\n    this.defenseOuterShield = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(224, 247, 250);\n    this.powerLightColor = [\n      new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(118, 251, 3),\n      new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(118, 252, 3),\n      new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(118, 253, 3),\n      new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(118, 254, 3),\n      new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(118, 255, 3)\n    ];\n    this.engineeringCraneTower = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 193, 7);\n    this.engineeringCraneClaw = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(147, 147, 135);\n    this.attackTurret = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(124, 146, 90);\n  }\n\n  /**\n   * @param {Array.<Array>}paletteSwap\n   * @param {ColorRGB} primaryColor\n   */\n  generateBuildingsPaletteSwap(paletteSwap, primaryColor) {\n    const newMainColor = this.buildingsCenter.mixColors(primaryColor, 0.60);\n    const shades = newMainColor.getShades(5);\n    paletteSwap.push([this.buildingsCenter, shades[0]]);\n    paletteSwap.push([this.buildingsLeft, shades[1]]);\n    paletteSwap.push([this.buildingsRight, shades[2]]);\n    paletteSwap.push([this.buildingsCenterLeft, shades[3]]);\n    paletteSwap.push([this.buildingsCenterStripe, shades[4]]);\n  }\n\n  /**\n   * @param {Array.<Array>}paletteSwap\n   * @param {ColorRGB} primaryColor\n   * @param {Structure} structure\n   */\n  generateAttackPaletteSwap(paletteSwap, primaryColor, structure) {\n    const ranks = (new _StructureRanks__WEBPACK_IMPORTED_MODULE_1__.StructureRanks()).getAttackRanks();\n\n    let color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(146, 131, 90);\n    if (structure.getRangeAttack() > ranks.rankS) {\n      color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 255, 255);\n    } else if (structure.getRangeAttack() > ranks.rankA) {\n      color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(90, 112, 146);\n    } else if (structure.getRangeAttack() > ranks.rankB) {\n      color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(90, 140, 146);\n    } else if (structure.getRangeAttack() > ranks.rankC) {\n      color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(90, 146, 120);\n    } else if (structure.getRangeAttack() > ranks.rankD) {\n      color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(124, 146, 90);\n    }\n\n    paletteSwap.push([this.attackTurret, color]);\n  }\n\n  /**\n   * @param {Array.<Array>}paletteSwap\n   * @param {ColorRGB} primaryColor\n   * @param {Structure} structure\n   */\n  generateDefensivePaletteSwap(paletteSwap, primaryColor, structure) {\n    const complimentaryColor = primaryColor.getComplimentaryColor();\n    const adjustedColor = complimentaryColor.clampAvgBrightness(240, 255);\n    const shieldShades = adjustedColor.getShades(10);\n    const ranks = (new _StructureRanks__WEBPACK_IMPORTED_MODULE_1__.StructureRanks()).getDefensiveRanks();\n\n    let outerShieldColor = shieldShades[4];\n    let innerShieldColor = shieldShades[6];\n    if (structure.getRangeDefense() > ranks.rankS) {\n      outerShieldColor = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(255, 255, 255);\n      innerShieldColor = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(40, 40, 40);\n    } else if (structure.getRangeDefense() > ranks.rankA) {\n      outerShieldColor = shieldShades[0];\n      innerShieldColor = shieldShades[2];\n    } else if (structure.getRangeDefense() > ranks.rankB) {\n      outerShieldColor = shieldShades[1];\n      innerShieldColor = shieldShades[3];\n    } else if (structure.getRangeDefense() > ranks.rankC) {\n      outerShieldColor = shieldShades[2];\n      innerShieldColor = shieldShades[4];\n    } else if (structure.getRangeDefense() > ranks.rankD) {\n      outerShieldColor = shieldShades[3];\n      innerShieldColor = shieldShades[5];\n    }\n\n    paletteSwap.push([this.defenseOuterShield, outerShieldColor]);\n    paletteSwap.push([this.defenseInnerShield, innerShieldColor]);\n  }\n\n  /**\n   * @param {Array.<Array>}paletteSwap\n   * @param {ColorRGB} primaryColor\n   * @param {Structure} structure\n   */\n  generateEngineeringPaletteSwap(paletteSwap, primaryColor, structure) {\n    const ranks = (new _StructureRanks__WEBPACK_IMPORTED_MODULE_1__.StructureRanks()).getEngineeringRanks();\n\n    let color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(194, 15, 15);\n    if (structure.getBuildRate() > ranks.rankS) {\n      color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(20, 20, 20);\n    } else if (structure.getBuildRate() > ranks.rankA) {\n      color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(31, 11, 229);\n    } else if (structure.getBuildRate() > ranks.rankB) {\n      color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(82, 148, 68);\n    } else if (structure.getBuildRate() > ranks.rankC) {\n      color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(240, 198, 5);\n    } else if (structure.getBuildRate() > ranks.rankD) {\n      color = new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(230, 124, 0);\n    }\n\n    paletteSwap.push([this.engineeringCraneTower, color]);\n  }\n\n  /**\n   * @param {Array.<Array>}paletteSwap\n   * @param {ColorRGB} primaryColor\n   * @param {Structure} structure\n   */\n  generatePowerPaletteSwap(paletteSwap, primaryColor, structure) {\n    const maxSlots = 5;\n    const slots = Math.min(structure.getChargingSlotCount(), maxSlots);\n    const offSlots = maxSlots - slots;\n    for (let i = 0; i < offSlots; i++) {\n      paletteSwap.push([this.powerLightColor[i], new _ColorRGB__WEBPACK_IMPORTED_MODULE_0__.ColorRGB(20, 44, 0)]);\n    }\n  }\n\n  /**\n   * @param {ColorRGB} primaryColor\n   * @param {Structure} structure\n   */\n  generatePaletteSwap(primaryColor, structure) {\n    const paletteSwap = [];\n    this.generateBuildingsPaletteSwap(paletteSwap, primaryColor);\n    this.generateAttackPaletteSwap(paletteSwap, primaryColor, structure);\n    this.generateDefensivePaletteSwap(paletteSwap, primaryColor, structure);\n    this.generateEngineeringPaletteSwap(paletteSwap, primaryColor, structure);\n    this.generatePowerPaletteSwap(paletteSwap, primaryColor, structure);\n    return paletteSwap;\n  }\n}\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/StructureStaticPalette.js?");

/***/ }),

/***/ "./src/js/constants.js":
/*!*****************************!*\
  !*** ./src/js/constants.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AMBITS\": () => (/* binding */ AMBITS),\n/* harmony export */   \"FEATURES\": () => (/* binding */ FEATURES)\n/* harmony export */ });\nconst\n  AMBITS = {\n    LAND: 'LAND',\n    SKY: 'SKY',\n    SPACE: 'SPACE',\n    WATER: 'WATER',\n  },\n  FEATURES = {\n    ATTACK: 'ATTACK_SYSTEM',\n    DEFENSIVE: 'DEFENSIVE_SYSTEM',\n    ENGINEERING: 'ENGINEERING_SYSTEM',\n    POWER: 'POWER_SYSTEM',\n    STORAGE: 'STORAGE_SYSTEM'\n  };\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/constants.js?");

/***/ }),

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _DroidUI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DroidUI */ \"./src/js/DroidUI.js\");\n\n\nconst droidUi = new _DroidUI__WEBPACK_IMPORTED_MODULE_0__.DroidUI();\ndroidUi.loadStructures('structures-list');\n\n\n//# sourceURL=webpack://coindroids-v5-ui/./src/js/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/index.js");
/******/ 	
/******/ })()
;